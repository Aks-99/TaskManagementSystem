// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManagement.API.Data;

#nullable disable

namespace TaskManagement.API.Migrations
{
    [DbContext(typeof(TaskManagementSystemDbContext))]
    [Migration("20240721093957_Document table update migration")]
    partial class Documenttableupdatemigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskManagement.API.Models.Domain.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmpTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmpTaskId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("TaskManagement.API.Models.Domain.EmpTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssignedTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("EmpTasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("97f78af3-35a0-4040-b69d-1b681193204c"),
                            AssignedTo = "Back-End developer",
                            Details = "Back-End Development",
                            EndDate = "01/03/2024",
                            StartDate = "01/01/2024",
                            Status = "In Progress",
                            TeamId = new Guid("458f9c61-4012-420a-b50d-28751b1fdadc")
                        },
                        new
                        {
                            Id = new Guid("78170408-08ff-4c07-9e03-0afa24f7a751"),
                            AssignedTo = "Front-End developer",
                            Details = "Front-End Development",
                            EndDate = "01/04/2024",
                            StartDate = "01/02/2024",
                            Status = "Not Started",
                            TeamId = new Guid("ee533d69-b942-4c40-a749-ae507810f418")
                        },
                        new
                        {
                            Id = new Guid("92b38395-3eac-4c1d-8fcf-a06bca6b193b"),
                            AssignedTo = "Tester",
                            Details = "Testing tasks",
                            EndDate = "01/05/2024",
                            StartDate = "01/02/2024",
                            Status = "Not Started",
                            TeamId = new Guid("ab4a8def-998d-4e02-bd60-03af45298028")
                        });
                });

            modelBuilder.Entity("TaskManagement.API.Models.Domain.Note", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EmpTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmpTaskId");

                    b.ToTable("Notes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79d1ee04-0291-4061-8478-39da12403a7e"),
                            Comments = "Back end development has started.",
                            EmpTaskId = new Guid("97f78af3-35a0-4040-b69d-1b681193204c")
                        },
                        new
                        {
                            Id = new Guid("b0454208-0431-4f30-bd2b-e62e1d27abcc"),
                            Comments = "Front end development has not started.",
                            EmpTaskId = new Guid("78170408-08ff-4c07-9e03-0afa24f7a751")
                        },
                        new
                        {
                            Id = new Guid("a7a99320-efac-4150-af4e-fe9d55c9b844"),
                            Comments = "Testing has not started.",
                            EmpTaskId = new Guid("92b38395-3eac-4c1d-8fcf-a06bca6b193b")
                        });
                });

            modelBuilder.Entity("TaskManagement.API.Models.Domain.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeadName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("458f9c61-4012-420a-b50d-28751b1fdadc"),
                            LeadName = "Back-End Lead",
                            Name = "Back-End"
                        },
                        new
                        {
                            Id = new Guid("ee533d69-b942-4c40-a749-ae507810f418"),
                            LeadName = "Front-End Lead",
                            Name = "Front-End"
                        },
                        new
                        {
                            Id = new Guid("ab4a8def-998d-4e02-bd60-03af45298028"),
                            LeadName = "Test Lead",
                            Name = "Testing"
                        });
                });

            modelBuilder.Entity("TaskManagement.API.Models.Domain.Document", b =>
                {
                    b.HasOne("TaskManagement.API.Models.Domain.EmpTask", "EmpTask")
                        .WithMany()
                        .HasForeignKey("EmpTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpTask");
                });

            modelBuilder.Entity("TaskManagement.API.Models.Domain.EmpTask", b =>
                {
                    b.HasOne("TaskManagement.API.Models.Domain.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TaskManagement.API.Models.Domain.Note", b =>
                {
                    b.HasOne("TaskManagement.API.Models.Domain.EmpTask", "EmpTask")
                        .WithMany()
                        .HasForeignKey("EmpTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmpTask");
                });
#pragma warning restore 612, 618
        }
    }
}
